/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.URL;
import java.util.Random;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/**
 * H κλαση αυτη αναφερεται στο graphical user interface οσον αφορα το ατομικο
 * παιχνιδι
 *
 * @
 * @version 1.0
 *
 */
public class Gui extends javax.swing.JFrame {

    static final int NUMBER_OF_ROUNDS = 3;
    private ResourceBundle bundle;
    protected Player ster = new Player(0);
    private int rightAnswer = -7;
    private int numberOfRounds = 0;
    private int numberOfPlayedQuestions = 0;
    private int flag = -7;
    private int bet = 0;
    private Question q = new Question();
    private GamePlay gamePlay;
    private String result;
    private long time;
    private Timer timer;
    private ImageIcon icon;
    private ScoreWriter scoreWriter;
    private boolean isInitialized = false;
    private String language;
    private String txt;

    public Gui() {
        initComponents();
        disableBets();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupForLanguage = new javax.swing.ButtonGroup();
        buttonGroupForBet = new javax.swing.ButtonGroup();
        question = new javax.swing.JLabel();
        progress = new javax.swing.JLabel();
        image = new javax.swing.JLabel();
        play = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        answer1 = new javax.swing.JLabel();
        answer2 = new javax.swing.JLabel();
        answer3 = new javax.swing.JLabel();
        answer4 = new javax.swing.JLabel();
        checkAnswer = new javax.swing.JLabel();
        bet1 = new javax.swing.JRadioButton();
        bet2 = new javax.swing.JRadioButton();
        bet3 = new javax.swing.JRadioButton();
        bet4 = new javax.swing.JRadioButton();
        betInfo = new javax.swing.JLabel();
        category = new javax.swing.JLabel();
        clock = new javax.swing.JLabel();
        playerInfo = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        exit = new javax.swing.JMenuItem();
        lang = new javax.swing.JMenu();
        english = new javax.swing.JRadioButtonMenuItem();
        greek = new javax.swing.JRadioButtonMenuItem();
        players = new javax.swing.JMenu();
        onePlayer = new javax.swing.JMenuItem();
        twoPlayers = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SINGLE GAME");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        progress.setText("1)CHOOCE PLAYERS,2)CHOOCE LANGUAGE,3)PLAY");

        play.setText("PLAY");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });
        play.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                playKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(answer4, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(answer3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(answer2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(answer1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(answer1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(answer2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(answer3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(answer4, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE))
        );

        buttonGroupForBet.add(bet1);
        bet1.setText("bet1");
        bet1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bet1ActionPerformed(evt);
            }
        });
        bet1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bet1KeyPressed(evt);
            }
        });

        buttonGroupForBet.add(bet2);
        bet2.setText("bet2");
        bet2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bet2ActionPerformed(evt);
            }
        });
        bet2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bet2KeyPressed(evt);
            }
        });

        buttonGroupForBet.add(bet3);
        bet3.setText("bet3");
        bet3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bet3ActionPerformed(evt);
            }
        });
        bet3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bet3KeyPressed(evt);
            }
        });

        buttonGroupForBet.add(bet4);
        bet4.setText("bet4");
        bet4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bet4ActionPerformed(evt);
            }
        });
        bet4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bet4KeyPressed(evt);
            }
        });

        clock.setForeground(new java.awt.Color(255, 0, 0));

        file.setText("File");

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        file.add(exit);

        menu.add(file);

        lang.setText("Language");

        buttonGroupForLanguage.add(english);
        english.setText("English");
        english.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                englishActionPerformed(evt);
            }
        });
        lang.add(english);

        buttonGroupForLanguage.add(greek);
        greek.setText("Ελληνικά");
        greek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greekActionPerformed(evt);
            }
        });
        lang.add(greek);

        menu.add(lang);

        players.setText("Players");

        onePlayer.setText("One Player");
        onePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onePlayerActionPerformed(evt);
            }
        });
        players.add(onePlayer);

        twoPlayers.setText("Two Players");
        twoPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoPlayersActionPerformed(evt);
            }
        });
        players.add(twoPlayers);

        menu.add(players);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(betInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bet3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(bet4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bet1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(bet2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(checkAnswer, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addComponent(clock, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                                .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(play)))
                        .addContainerGap(151, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(playerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(play)
                            .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(category, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(34, 34, 34)
                        .addComponent(betInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bet1)
                            .addComponent(bet2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bet3)
                            .addComponent(bet4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(clock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(question, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(playerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)))
                .addComponent(checkAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Πατωντας exit ο χρηστης κλεινει το παραθυρο και τερματιζει η εφαρμογη
     * καλωντας την dispose().
     *
     * @param evt το γεγονος ActionEvent
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    /**
     * Αν επιλεξει Αγγλικά τοτε στο isInitialized μπαινει true ωστε να γινει
     * ελεγχος παρακατω και σε περιπτωση που δεν ακολουθησει τις αρχικες οδηγιες
     * για να παιξει σωστα να του εμφανισει καταλληλο μηνυμα
     *
     * sto txt kai language μπαινουν καταλληλα Strings ωστε να αρχικοποιηθουν
     * μετα τα Αγγλικά και να φορτωθουν τα αντιστοιχα δεδομενα στα Αγγλικά.
     *
     * @param evt το γεγονος ActionEvent
     */
    private void englishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_englishActionPerformed
        isInitialized = true;
        txt = "dataEn.txt";
        language = "english";

    }//GEN-LAST:event_englishActionPerformed

    /**
     * Αν επιλεξει Ελληνικά τοτε στο isInitialized μπαινει true ωστε να γινει
     * ελεγχος παρακατω και σε περιπτωση που δεν ακολουθησει τις αρχικες οδηγιες
     * για να παιξει σωστα να του εμφανισει καταλληλο μηνυμα
     *
     * sto txt kai language μπαινουν καταλληλα Strings ωστε να αρχικοποιηθουν
     * μετα τα Ελληνικά και να φορτωθουν τα αντιστοιχα δεδομενα στα Ελληνικά.
     *
     * @param evt το γεγονος ActionEvent
     */
    private void greekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greekActionPerformed
        isInitialized = true;
        txt = "dataGr.txt";
        language = "greek";

    }//GEN-LAST:event_greekActionPerformed
    /**
     * Αν το isInitialized ειναι false σημαινει οτι δεν επελεξε πρωτα γλωσσα
     * ωστε να φορτωθουν τα δεδομενα και ετσι του βγαζει μηνυμα λαθους ωστε να
     * διαλεξει γλωσσα πρωτα και μετα να πατησει το κουμπι.
     *
     * Οταν πατησει ,τοτε διαλεγεται ενας τυχαιος αριθμος απο 0-2 με την βοηθεια της συναρτησης
     * getRandom που  αντιστοιχει στον εκαστοτε γυρο. Δημιουργειται ενα αντικειμενο της κλασης GamePlay 
     * στο οποιο περναμε ως παραμετρους
     * τα txt και language που ειχαν αρχικοποιηθει νωριτερα, στο πεδιο bundle του Gui παιρνω το ιδιο bundle με αυτο της κλασης
     * παιχνιδιου που φτιαχτηκε ωστε τα μηνυματα να βγαινουν στην ιδια γλωσσα  και "τραβιεται" μια ερωτηση απο τον
     * συγκεκριμενο γυρο μεσω του αντικειμενου gamePlay και της μεθοδου
     * getAQuestionFromARound βαση αυτου του τυχαιου αριθμου .Μετα καλειται η
     * playGame για τον παραπανω αριθμο-γυρο (αναλυεται παρακατω).
     *
     * @param evt το γεγονος ActionEvent
     */
    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        if (isInitialized == false) {
            question.setText(" 1)CHOOCE PLAYERS, 2)CHOOCE LANGUAGE, 3)PLAY !!  ");
        } else {
            flag = getRandom();
            try {
                gamePlay = new GamePlay(txt, language);
                bundle = gamePlay.getBundle();
                q = gamePlay.getAQuestionFromARound(flag);
                playGame(flag);
            } catch (IOException ex) {
            }
        }
        
    }//GEN-LAST:event_playActionPerformed
    /**
     * KeyPressed στην φορμα λογω focus
     *
     * @param evt
     */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_formKeyPressed

    //EVALA STO KOUMPI "PLAY" KEYPRESSED GIA FOCUS GIA NA DOYLEUEI GENIKA TO PLIKTROLOGIO
    //PEIRAMATIKA ARKEI NA BALW SE 1 MEXRI STIGMHS(EVALA STIN PROKEIMENH STO PLAY), BOREI ARGOTERA NA XREIASTEI NA
    //BALW KAI SE ALLA
    /**
     * KeyPressed στo κουμπι λογω focus
     *
     * @param evt
     */
    private void playKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_playKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_playKeyPressed
    /**
     * Καλειται η giveBet(αναλυεται παρακατω) με πονταρισμα 1000
     *
     * @param evt
     */
    private void bet4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bet4ActionPerformed
        giveBet(evt, 1000);
    }//GEN-LAST:event_bet4ActionPerformed
    /**
     * Καλειται η giveBet(αναλυεται παρακατω) με πονταρισμα 500
     *
     * @param evt
     */
    private void bet2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bet2ActionPerformed
        giveBet(evt, 500);
    }//GEN-LAST:event_bet2ActionPerformed
    /**
     * Καλειται η giveBet(αναλυεται παρακατω) με πονταρισμα 250
     *
     * @param evt
     */
    private void bet1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bet1ActionPerformed
        giveBet(evt, 250);
    }//GEN-LAST:event_bet1ActionPerformed
    /**
     * Καλειται η giveBet(αναλυεται παρακατω) με πονταρισμα 750
     *
     * @param evt
     */
    private void bet3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bet3ActionPerformed
        giveBet(evt, 750);
    }//GEN-LAST:event_bet3ActionPerformed
    /**
     * KeyPressed στo κουμπι λογω focus
     *
     * @param evt
     */
    private void bet4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bet4KeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_bet4KeyPressed
    /**
     * KeyPressed στo κουμπι λογω focus
     *
     * @param evt
     */
    private void bet1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bet1KeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_bet1KeyPressed
    /**
     * KeyPressed στo κουμπι λογω focus
     *
     * @param evt
     */
    private void bet2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bet2KeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_bet2KeyPressed
    /**
     * KeyPressed στo κουμπι λογω focus
     *
     * @param evt
     */
    private void bet3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bet3KeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_bet3KeyPressed
    
    /**
     * Υλοποιηση της KeyPressed κανοντας setFocusable(true) ωστε να μην χανεται ο ελεγχος
     * του προγραμματος οταν ο χρηστης πατησει κουμπι για απαντηση.Επισης καλειται η foo(αναλυεται παρακατω).
     * @param evt 
     */
    private void keyPressed(java.awt.event.KeyEvent evt) {
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        try {
            foo(evt);
        } catch (IOException ex) {

        }
    }
    
    /**
     * Σε ενα πεδιο bet το οποιο ανανεωνεται καθε φορα εκχωρειται το επιθυμητο ποσο που θελει να πονταρει
     * και μεσα στην giveBet γινεται το setVisible  στο παραθυρο για την ερωτηση και τις δοθεισες απαντησεις που ακολουθουν
     *  αφου πριν πονταρει, θελουμε να φαινεται μονο η κατηγορια της ερωτησης που παιζει.
     * @param evt το γεγονος που παταει για να διαλεξει του ποντους που θελει
     * @param pointsbet το νουμερο που αντιστοιχει στο πονταρισμα του
     */
    private void giveBet(java.awt.event.ActionEvent evt, int pointsbet) {
        bet = pointsbet;
        question.setVisible(true);
        jPanel1.setVisible(true);
        question.setVisible(true);
        checkAnswer.setVisible(true);
    }
    
    /**
     * Αν επιλεξει τον εναν παικτη παραμενει στο Gui που ειναι τωρα
     * @param evt 
     */
    private void onePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onePlayerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_onePlayerActionPerformed
    
    /**
     * Αν επιλεξει για 2 παικτες μεταφερεται στο Gui2(αναλυεται παρακατω).
     * @param evt 
     */
    private void twoPlayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoPlayersActionPerformed
        Gui2 g = new Gui2();
        g.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_twoPlayersActionPerformed
    
    /**
     * Ο παικτης δινει τις απαντησεις του με τα πληκτρα 1 2 3 4 που αντιστοιχουν στις αντιστοιχες
     * εμφανισεις των απαντησεων στα 1 2 3 4.
     * Αναλογα με τον γυρο που παιζει καλουνται οι αντιστοιχες συναρτησεις για να ελεγξουν
     * την απαντηση του παικτη.
     * Γινονται οι καταλληλοι ελεγχοι ωστε οταν εμφανιζεται ερωτηση και μετα πατησει κουμπι να συνεχισει 
     * σε επομενη ερωτηση .Αυτο γινεται με την κληση της playGame ειτε με το flag που επαιζε ήδη 
     * ετσι ωστε να παιξει 5 ερωτησεις και να τελειωσει τον γυρο είτε αν παιξει 5 ερωτησεις διαλεγεται 
     * τυχαια ενα καινουργιο flag ωστε να παιχτει ενας νεος γυρος.
     * 
     * Μολις ολοκληρωσει τους 3 γυρους (που εχουμε ορισει εμεις οτι θα παιζει για να φτανουν οι ερωτησεις που βαλαμε στο παιχνιδι)
     * που παιζει του εμφανιζονται οι συνολικοι του ποντοι με τους οποιους τερματησε
     * και τους γραφει στο αρχειο.
     * @param evt
     * @throws IOException 
     */
    public void foo(java.awt.event.KeyEvent evt) throws IOException {
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);

        int hisAnswer = 0;

        switch (evt.getKeyCode()) {
            case KeyEvent.VK_1:
                hisAnswer = 1;
                break;
            case KeyEvent.VK_2:
                hisAnswer = 2;
                break;
            case KeyEvent.VK_3:
                hisAnswer = 3;
                break;
            case KeyEvent.VK_4:
                hisAnswer = 4;
                break;
            default:
                break;
        }

        switch (flag) {
            case 0:
                checkChoiceForRoundRightAnswer(hisAnswer);
                break;
            case 1:
                checkChoiceForRoundBet(hisAnswer, bet);
                break;
            case 2:
                checkChoiceForRoundStopwatch(hisAnswer);
                timer.restart(); //Απειροελαχιστα πριν δειξεις αν ειναι σωστο/λαθος ξαναρχισε το χρονομετρο
                break;
            default:
                break;
        }

        numberOfPlayedQuestions += 1;

        if (numberOfPlayedQuestions == 5) {
            //Epaikse 5 erwtiseis ara oloklhrwse 1 guro
            numberOfRounds += 1;
        }
        playerInfo.setText(bundle.getString("paiktis") + ster.getPoints() + bundle.getString("pontous"));

        if (numberOfRounds < NUMBER_OF_ROUNDS) {
            if (numberOfPlayedQuestions < 5) {
                //thelw na kalesw tin playGame me ton idio arithmo pou pire gia na ksanapeksei ton idio guro
                q = gamePlay.getAQuestionFromARound(flag);
                playGame(flag);
            } else if (numberOfPlayedQuestions == 5) {
                numberOfPlayedQuestions = 0;
                System.out.println("neos guros");
                flag = getRandom();
                q = gamePlay.getAQuestionFromARound(flag);
                playGame(flag);
            }
        } else {
            clock.setVisible(false);
            jPanel1.setVisible(false);
            progress.setVisible(false);
            category.setVisible(false);
            play.setVisible(false);
            image.setVisible(false);
            playerInfo.setVisible(false);
            question.setText(bundle.getString("end") + ster.getPoints());
            disableBets();
            scoreWriter = new ScoreWriter(ster.getPoints());
            scoreWriter.writeScoreFor1();
        }
    }   
    
    /**Αυτη η μεθοδος σχετιζεται με το κομματι της διεπαφης του χρηστη 
     * αφου εμφανιζει ερωτησεις και απαντησεις, τα ονοματα των γυρων και το ρολοι σε περιπτωση που
     * παιζει γυρο Σταματησε το χρονομετρο.
     * Το 0 αντιστοιχει στον γυρο Σωστη απαντηση το 1 στον Γυρο Πονταρισμα και το 2 στον Γυρο Σταματησε το Χρονομετρο
     * 
     * @param theRandomNumber το νουμερο που υποδηλωνει ποιον γυρο παιζει καθε φορα
     * @return 
     */
    public int playGame(int theRandomNumber) {

        disableBets();

        flag = theRandomNumber;
        
        switch (theRandomNumber) {
            case 0:
                clock.setVisible(false);
                category.setVisible(false);
                image.setIcon(null);
                progress.setText(bundle.getString("giros1"));
                checkToShowImage(q);
                question.setText(q.getQuestionName());
                rightAnswer = q.keepTheRightAnswer();
                showTheAnswers(q);
                //EDW TWRA PREPEI NA PATHSEI TA KOUMPIA 
                break;
            case 1:
                clock.setVisible(false);
                category.setVisible(true);
                image.setIcon(null);
                progress.setText(bundle.getString("giros2"));
                question.setVisible(false);
                jPanel1.setVisible(false);
                String cat = q.getCategory();
                category.setText(cat);
                showBets();
                //EDW DIALEGEI TOUS PONTOUS POU THELEI ME CLICK.MOLIS KANEI CLICK EMFANIZETAI I ERWTISI KAI OI APANTHSEIS
                checkToShowImage(q);
                question.setText(q.getQuestionName());
                rightAnswer = q.keepTheRightAnswer();
                showTheAnswers(q);
                //EDW TWRA PREPEI NA PATHSEI TA KOUMPIA 
                break;
            case 2:
                image.setIcon(null);
                category.setVisible(false);
                progress.setText(bundle.getString("giros3"));
                checkToShowImage(q);
                question.setText(q.getQuestionName());
                rightAnswer = q.keepTheRightAnswer();
                showTheAnswers(q);
                //MOLIS EMFANISTEI H ERWTHSH & OI APANTHSEIS THS, TOTE ARXIZEI NA METRAEI O XRONOS
                startClock();
                time = System.currentTimeMillis();
                //EDW PATAEI APANTHSH
                break;
            default:
                break;
        }
        return 1;

    }
    
    /**Η μεθοδος αυτη ελεγχει αν η ερωτηση ειναι instanceof της QuestionWithImage ωστε να εμφανισει
     * την αντιστοιχη εικονα και την κανει set σε ενα label.
     * 
     * @param q η ερωτηση για την οποια θα γινει ελεγχος για την εικονα
     */
    public void checkToShowImage(Question q) {
        if (q instanceof QuestionWithImage) {
            String filename = q.getImage();
            filename = "/images/" + filename + ".jpg";
            URL imageURL = getClass().getResource(filename);
            if (imageURL != null) {
                icon = new ImageIcon(imageURL);
            }
            image.setIcon(icon);
            image.setVisible(true);
        }
    }
    
    /**
     * Καθιστα αορατα τα πονταρισματα για λογους διαμορφωσης κατα την διεξαγωγη του παιχνιδιου
     */
    public void disableBets() {
        bet1.setVisible(false);
        bet2.setVisible(false);
        bet3.setVisible(false);
        bet4.setVisible(false);
        betInfo.setVisible(false);
    }
    /**
     * Καθιστα ορατα τα πονταρισματα για λογους διαμορφωσης κατα την διεξαγωγη του παιχνιδιου
     * και "καθαριζει" την προηγουμενη επιλογη πονταρισματος του χρηστη για την νεα ερωτηση
     */
    public void enableBets() {
        buttonGroupForBet.clearSelection();
        bet1.setVisible(true);
        bet2.setVisible(true);
        bet3.setVisible(true);
        bet4.setVisible(true);
        betInfo.setVisible(true);
    }
    
    /**
     * Εμφανιζει στον χρηστη και κανει set στα labels τα επιτρεπτα ποσα πονταρισματος.
     */
    public void showBets() {
        enableBets();

        betInfo.setText(bundle.getString("posous_pontous_pontareis"));

        bet1.setText("250");
        bet2.setText("500");
        bet3.setText("750");
        bet4.setText("1000");
    }
    
    /**Ελεγχεται αν η απαντηση του ειναι η ιδια με την σωστη απαντηση.
     * Αν ναι κερδιζει 1000 ποντους , αλλιως του εμφανιζει λαθος.
     * 
     * @param hisAnswer το νουμερο που εχει δωσει το οποιο αντιστοιχει στην απαντηση του
     */
    public void checkChoiceForRoundRightAnswer(int hisAnswer) {

        if (hisAnswer == rightAnswer) {
            checkAnswer.setText(bundle.getString("swsto") + bundle.getString("kerdises") + "1000 " + bundle.getString("pontous"));
            ster.win(1000);
        } else {
            checkAnswer.setText(bundle.getString("lathos"));
        }
    }
    
    /**Ο χρονος που ειχε αρχισει να μετραει οταν μπηκε στον γυρο Σταματησε το Χρονομετρο σταματαει οταν δωσει απαντηση
     * Αν η απαντηση του ειναι σωστη το υπολοιπο τον millis πολλ/ζεται με το 0.2 και αυτοι ειναι οι ποντοι του.
     * Αν ο χρονος ειναι > απο 5 sec τοτε παρολο που εχει απαντησει σωστα παιρνει 0 
     * 
     * @param hisAnswer το νουμερο που εχει δωσει το οποιο αντιστοιχει στην απαντηση του
     */
    public void checkChoiceForRoundStopwatch(int hisAnswer) {
        int pointsForRoundStopwatch;
        long endTime = System.currentTimeMillis();
        long millisLeft;

        if (hisAnswer == rightAnswer) {
            if ((endTime - time) / 1000 < 5) {
                //MESA STA 5 SECOND
                //System.out.println(5-(endTime-time)/1000+" sec emeinan");
                millisLeft = 5000 - (endTime - time);
                pointsForRoundStopwatch = (int) (millisLeft * 0.2);
            } else {
                pointsForRoundStopwatch = 0;
            }
            checkAnswer.setText(bundle.getString("swsto") + bundle.getString("kerdises") + pointsForRoundStopwatch + " " + bundle.getString("pontous"));
            ster.win(pointsForRoundStopwatch);
        } else {

            checkAnswer.setText(bundle.getString("lathos"));
        }
    }
    
    /**
     * Η μεθοδος αυτη ασχολειται αποκλειστικα με την εμφανιση και την αντιστροφη μετρηση του ρολογιου
     */
    public void startClock() {
        clock.setVisible(true);
        clock.setText("5 sec");
        timer = new Timer(1000, new ActionListener() {
            private int count = 5;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (count <= 0) {
                    ((Timer) e.getSource()).stop();
                } else {
                    clock.setText(Integer.toString(count) + " sec");
                    count -= 1;
                }
                clock.setText(Integer.toString(count) + " sec");
            }

        });
        timer.start();
    }
    
    /**
     * Μεθοδος για αναπαραγωγη ενος τυχαιου αριθμου απο 0-2 για να παιξει εναν τυχαιο γυρο
     * @return τον τυχαιο αριθμο
     */
    public int getRandom() {
        Random r1 = new Random();
        int i1 = r1.nextInt(3);
        return i1;
    }
    
    /**
     * Αν απαντησει σωστα κερδιζει τους ποντους που πονταρε αλλιως τους χανει.
     * 
     * @param hisAnswer το νουμερο που εχει δωσει το οποιο αντιστοιχει στην απαντηση του
     * @param b το ποσο που εχει δωσει ως πονταρισμα
     */
    public void checkChoiceForRoundBet(int hisAnswer, int b) {
        if (hisAnswer == rightAnswer) {

            result = bundle.getString("swsto") + bundle.getString("kerdises") + b + "  " + bundle.getString("pontous");
            checkAnswer.setText(result);
            ster.win(b);
        } else {

            result = bundle.getString("lathos") + bundle.getString("exases") + b + "  " + bundle.getString("pontous");
            checkAnswer.setText(result);
            ster.lose(b);
        }
    }
    
    /**Μεθοδος ωστε να εμφανισει τις απαντησεις καθε ερωτησης.
     * 
     * @param q η ερωτηση για να εμφανιστουν οι απαντησεις της στα αντιστοιχα labels
     */
    public void showTheAnswers(Question q) {
        answer1.setText("1. " + q.getAnswers().get(0));
        answer2.setText("2. " + q.getAnswers().get(1));
        answer3.setText("3. " + q.getAnswers().get(2));
        answer4.setText("4. " + q.getAnswers().get(3));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel answer1;
    private javax.swing.JLabel answer2;
    private javax.swing.JLabel answer3;
    private javax.swing.JLabel answer4;
    private javax.swing.JRadioButton bet1;
    private javax.swing.JRadioButton bet2;
    private javax.swing.JRadioButton bet3;
    private javax.swing.JRadioButton bet4;
    private javax.swing.JLabel betInfo;
    private javax.swing.ButtonGroup buttonGroupForBet;
    private javax.swing.ButtonGroup buttonGroupForLanguage;
    private javax.swing.JLabel category;
    private javax.swing.JLabel checkAnswer;
    private javax.swing.JLabel clock;
    private javax.swing.JRadioButtonMenuItem english;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu file;
    private javax.swing.JRadioButtonMenuItem greek;
    private javax.swing.JLabel image;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenu lang;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem onePlayer;
    private javax.swing.JButton play;
    private javax.swing.JLabel playerInfo;
    private javax.swing.JMenu players;
    private javax.swing.JLabel progress;
    private javax.swing.JLabel question;
    private javax.swing.JMenuItem twoPlayers;
    // End of variables declaration//GEN-END:variables

}
